#include <MIDI.h>
#include "Controller.h"

/*************************************************************
  MIDI CONTROLLER

  by Notes and Volts
  www.notesandvolts.com

  Version 1.2 **Arduino UNO ONLY!**
 *************************************************************/

MIDI_CREATE_DEFAULT_INSTANCE();

//************************************************************
//***SET THE NUMBER OF CONTROLS USED**************************
//************************************************************
//---How many buttons are connected directly to pins?---------
byte NUMBER_BUTTONS = 0;
//---How many potentiometers are connected directly to pins?--
byte NUMBER_POTS = 2;
//---How many buttons are connected to a multiplexer?---------
byte NUMBER_MUX_BUTTONS = 0;
//---How many potentiometers are connected to a multiplexer?--
byte NUMBER_MUX_POTS = 64; //
byte NUMBER_MUX_POTS_NPRN = 0; //
//************************************************************

//***ANY MULTIPLEXERS? (74HC4067)************************************
//MUX address pins must be connected to Arduino UNO pins 2,3,4,5
//A0 = PIN2, A1 = PIN3, A2 = PIN4, A3 = PIN5
//*******************************************************************
//Mux NAME (OUTPUT PIN, , How Many Mux Pins?(8 or 16) , Is It Analog?);


//Mux M0(10, 16, false); //Digital multiplexer on Arduino pin 10
Mux M1(A0, 16, true); //Analog multiplexer on Arduino analog pin A1
Mux M2(A1, 16, true); //Analog multiplexer on Arduino analog pin A2
Mux M3(A2, 16, true); //Analog multiplexer on Arduino analog pin A3
Mux M4(A3, 16, true); //Analog multiplexer on Arduino analog pin A3

//*******************************************************************


//***DEFINE DIRECTLY CONNECTED POTENTIOMETERS************************
//Pot (Pin Number, Command, CC Control, Channel Number)
//**Command parameter is for future use**

Pot PO1(A4, 0, 101, 1);
Pot PO2(A5, 0, 102, 1);
//Pot PO3(A2, 0, 22, 1);
//Pot PO4(A3, 0, 118, 1);
//Pot PO5(A4, 0, 30, 1);
//Pot PO6(A5, 0, 31, 1);
//*******************************************************************
//Add pots used to array below like this->  Pot *POTS[] {&PO1, &PO2, &PO3, &PO4, &PO5, &PO6};
Pot *POTS[] {&PO2, &PO1};
//*******************************************************************


//***DEFINE DIRECTLY CONNECTED BUTTONS*******************************
//Button (Pin Number, Command, Note Number, Channel, Debounce Time)
//** Command parameter 0=NOTE  1=CC  2=Toggle CC **

//Button BU1(2, 0, 60, 1, 5 );
//Button BU2(3, 0, 61, 1, 5 );
//Button BU3(4, 0, 62, 1, 5 );
//Button BU4(5, 0, 63, 1, 5 );
//Button BU5(6, 0, 64, 1, 5 );
//Button BU6(7, 0, 65, 1, 5 );
//Button BU7(8, 1, 64, 1, 5 );
//Button BU8(9, 2, 64, 1, 5 );
//*******************************************************************
//Add buttons used to array below like this->  Button *BUTTONS[] {&BU1, &BU2, &BU3, &BU4, &BU5, &BU6, &BU7, &BU8};
Button *BUTTONS[] {};
//*******************************************************************


//***DEFINE BUTTONS CONNECTED TO MULTIPLEXER*************************
//Button::Button(Mux mux, byte muxpin, byte command, byte value, byte channel, byte debounce)
//** Command parameter 0=NOTE  1=CC  2=Toggle CC **

//Button MBU1(M1, 0, 0, 70, 1, 5);
//Button MBU2(M1, 1, 1, 71, 1, 5);
//Button MBU3(M1, 2, 2, 72, 1, 5);
//Button MBU4(M1, 3, 0, 73, 1, 5);
//Button MBU5(M1, 4, 0, 74, 1, 5);
//Button MBU6(M1, 5, 0, 75, 1, 5);
//Button MBU7(M1, 6, 0, 76, 1, 5);
//Button MBU8(M1, 7, 0, 77, 1, 5);
//Button MBU9(M1, 8, 0, 78, 1, 5);
//Button MBU10(M1, 9, 0, 79, 1, 5);
//Button MBU11(M1, 10, 0, 80, 1, 5);
//Button MBU12(M1, 11, 0, 81, 1, 5);
//Button MBU13(M1, 12, 0, 82, 1, 5);
//Button MBU14(M1, 13, 0, 83, 1, 5);
//Button MBU15(M1, 14, 0, 84, 1, 5);
//Button MBU16(M1, 15, 0, 85, 1, 5);
//*******************************************************************
////Add multiplexed buttons used to array below like this->  Button *MUXBUTTONS[] {&MBU1, &MBU2, &MBU3, &MBU4, &MBU5, &MBU6.....};
Button *MUXBUTTONS[] {};

//*******************************************************************


//***DEFINE POTENTIOMETERS CONNECTED TO MULTIPLEXER*******************
//Pot::Pot(Mux mux, byte muxpin, byte command, byte control, byte channel)
//**Command parameter is for future use**


Pot MPO1(M1, 0, 0, 77, 1);
Pot MPO2(M1, 1, 0, 14, 1);
Pot MPO3(M1, 2, 0, 15, 1);
Pot MPO4(M1, 3, 0, 05, 1);
Pot MPO5(M1, 4, 0, 78, 1);
Pot MPO6(M1, 5, 0, 82, 1);
Pot MPO7(M1, 6, 0, 18, 1);
Pot MPO8(M1, 7, 0, 19, 1);
Pot MPO9(M1, 8, 0, 12, 1);
Pot MPO10(M1, 9, 0, 22, 1);
Pot MPO11(M1, 10, 0, 21, 1);
Pot MPO12(M1, 11, 0, 20, 1);
Pot MPO13(M1, 12, 0, 72, 1);
Pot MPO14(M1, 13, 0, 70, 1);
Pot MPO15(M1, 14, 0, 75, 1);
Pot MPO16(M1, 15, 0, 73, 1);

Pot MPO21(M2, 0, 0, 74, 1);
Pot MPO22(M2, 1, 0, 71, 1);
Pot MPO23(M2, 2, 0, 83, 1);
Pot MPO24(M2, 3, 0, 79, 1);
Pot MPO25(M2, 4, 0, 28, 1); // ce potar semble avoir du bruit
Pot MPO26(M2, 5, 0, 29, 1);
Pot MPO27(M2, 6, 0, 30, 1);
Pot MPO28(M2, 7, 0, 31, 1);
Pot MPO29(M2, 8, 0, 85, 1);
Pot MPO210(M2, 9, 0, 94, 1);
Pot MPO211(M2, 10, 0, 13, 1);
Pot MPO212(M2, 11, 0, 93, 1);
Pot MPO213(M2, 12, 0, 26, 1);
Pot MPO214(M2, 13, 0, 25, 1);
Pot MPO215(M2, 14, 0, 24, 1);
Pot MPO216(M2, 15, 0, 23, 1);

Pot MPO31(M3, 0, 0, 27, 1);
Pot MPO32(M3, 1, 0, 76, 1);
Pot MPO33(M3, 2, 0, 92, 1);
Pot MPO34(M3, 3, 0, 90, 1);
Pot MPO35(M3, 4, 0, 87, 1);
Pot MPO36(M3, 5, 0, 95, 1);
Pot MPO37(M3, 6, 0, 10, 1);
Pot MPO38(M3, 7, 0, 88, 1);
Pot MPO39(M3, 8, 0, 103, 1);
Pot MPO310(M3, 9, 0, 104, 1);
Pot MPO311(M3, 10, 0, 105, 1);
Pot MPO312(M3, 11, 0, 106, 1);
Pot MPO313(M3, 12, 0, 107, 1);
Pot MPO314(M3, 13, 0, 108, 1);
Pot MPO315(M3, 14, 0, 109, 1);
Pot MPO316(M3, 15, 0, 110, 1);

Pot MPO41(M4, 0, 0, 111, 1);
Pot MPO42(M4, 1, 0, 112, 1);
Pot MPO43(M4, 2, 0, 113, 1);
Pot MPO44(M4, 3, 0, 114, 1);
Pot MPO45(M4, 4, 0, 115, 1); // ce potar semble avoir du bruit
Pot MPO46(M4, 5, 0, 116, 1);
Pot MPO47(M4, 6, 0, 117, 1);
Pot MPO48(M4, 7, 0, 118, 1);
Pot MPO49(M4, 8, 0, 119, 1);
Pot MPO410(M4, 9, 0, 120, 1);
Pot MPO411(M4, 10, 0, 121, 1);
Pot MPO412(M4, 11, 0, 122, 1);
Pot MPO413(M4, 12, 0, 123, 1);
Pot MPO414(M4, 13, 0, 124, 1);
Pot MPO415(M4, 14, 0, 125, 1);
Pot MPO416(M4, 15, 0, 126, 1);

Pot *MUXPOTSNPRN[]{};

//*******************************************************************
//Add multiplexed pots used to array below like this->  Pot *MUXPOTS[] {&MPO1, &MPO2, &MPO3, &MPO4, &MPO5, &MPO6.....};
Pot *MUXPOTS[] {
  &MPO1, &MPO2, &MPO3, &MPO4, &MPO5, &MPO6, &MPO7, &MPO8, &MPO9, &MPO10, &MPO11, &MPO12, &MPO13, &MPO14, &MPO15, &MPO16,
  &MPO21, &MPO22, &MPO23, &MPO24, &MPO25, &MPO26, &MPO27, &MPO28, &MPO29, &MPO210, &MPO211, &MPO212, &MPO213, &MPO214, &MPO215, &MPO216,
  &MPO31, &MPO32, &MPO33, &MPO34, &MPO35, &MPO36, &MPO37, &MPO38, &MPO39, &MPO310, &MPO311, &MPO312, &MPO313, &MPO314, &MPO315, &MPO316,
  &MPO41, &MPO42, &MPO43, &MPO44, &MPO45, &MPO46, &MPO47, &MPO48, &MPO49, &MPO410, &MPO411, &MPO412, &MPO413, &MPO414, &MPO415, &MPO416};
//*******************************************************************


void setup() {
  MIDI.begin(MIDI_CHANNEL_OFF);
}

void loop() {
  if (NUMBER_BUTTONS != 0) updateButtons();
  if (NUMBER_POTS != 0) updatePots();
  if (NUMBER_MUX_BUTTONS != 0) updateMuxButtons();
  if (NUMBER_MUX_POTS != 0) updateMuxPots();
  if (NUMBER_MUX_POTS != 0) updateMuxPotsNprn();
}


//*****************************************************************
void updateButtons() {

  // Cycle through Button array
  for (int i = 0; i < NUMBER_BUTTONS; i = i + 1) {
    byte message = BUTTONS[i]->getValue();

    //  Button is pressed
    if (message == 0) {
      switch (BUTTONS[i]->Bcommand) {
        case 0: //Note
          MIDI.sendNoteOn(BUTTONS[i]->Bvalue, 127, BUTTONS[i]->Bchannel);
          break;
        case 1: //CC
          MIDI.sendControlChange(BUTTONS[i]->Bvalue, 127, BUTTONS[i]->Bchannel);
          break;
        case 2: //Toggle
          if (BUTTONS[i]->Btoggle == 0) {
            MIDI.sendControlChange(BUTTONS[i]->Bvalue, 127, BUTTONS[i]->Bchannel);
            BUTTONS[i]->Btoggle = 1;
          }
          else if (BUTTONS[i]->Btoggle == 1) {
            MIDI.sendControlChange(BUTTONS[i]->Bvalue, 0, BUTTONS[i]->Bchannel);
            BUTTONS[i]->Btoggle = 0;
          }
          break;
      }
    }

    //  Button is not pressed
    if (message == 1) {
      switch (BUTTONS[i]->Bcommand) {
        case 0:
          MIDI.sendNoteOff(BUTTONS[i]->Bvalue, 0, BUTTONS[i]->Bchannel);
          break;
        case 1:
          MIDI.sendControlChange(BUTTONS[i]->Bvalue, 0, BUTTONS[i]->Bchannel);
          break;
      }
    }
  }
}
//*******************************************************************
void updateMuxButtons() {

  // Cycle through Mux Button array
  for (int i = 0; i < NUMBER_MUX_BUTTONS; i = i + 1) {

    MUXBUTTONS[i]->muxUpdate();
    byte message = MUXBUTTONS[i]->getValue();

    //  Button is pressed
    if (message == 0) {
      switch (MUXBUTTONS[i]->Bcommand) {
        case 0: //Note
          MIDI.sendNoteOn(MUXBUTTONS[i]->Bvalue, 127, MUXBUTTONS[i]->Bchannel);
          break;
        case 1: //CC
          MIDI.sendControlChange(MUXBUTTONS[i]->Bvalue, 127, MUXBUTTONS[i]->Bchannel);
          break;
        case 2: //Toggle
          if (MUXBUTTONS[i]->Btoggle == 0) {
            MIDI.sendControlChange(MUXBUTTONS[i]->Bvalue, 127, MUXBUTTONS[i]->Bchannel);
            MUXBUTTONS[i]->Btoggle = 1;
          }
          else if (MUXBUTTONS[i]->Btoggle == 1) {
            MIDI.sendControlChange(MUXBUTTONS[i]->Bvalue, 0, MUXBUTTONS[i]->Bchannel);
            MUXBUTTONS[i]->Btoggle = 0;
          }
          break;
      }
    }
    //  Button is not pressed
    if (message == 1) {
      switch (MUXBUTTONS[i]->Bcommand) {
        case 0:
          MIDI.sendNoteOff(MUXBUTTONS[i]->Bvalue, 0, MUXBUTTONS[i]->Bchannel);
          break;
        case 1:
          MIDI.sendControlChange(MUXBUTTONS[i]->Bvalue, 0, MUXBUTTONS[i]->Bchannel);
          break;
      }
    }
  }
}
//***********************************************************************
void updatePots() {
  for (int i = 0; i < NUMBER_POTS; i = i + 1) {
    byte potmessage = POTS[i]->getValue();
    if (potmessage != 255) MIDI.sendControlChange(POTS[i]->Pcontrol, potmessage, POTS[i]->Pchannel);
  }
}
//***********************************************************************
void updateMuxPots() {
  for (int i = 0; i < NUMBER_MUX_POTS; i = i + 1) {
    MUXPOTS[i]->muxUpdate();
    byte potmessage = MUXPOTS[i]->getValue();
    if (potmessage != 255) MIDI.sendControlChange(MUXPOTS[i]->Pcontrol, potmessage, MUXPOTS[i]->Pchannel);
  }
}

//***********************************************************************
void updateMuxPotsNprn() {
  for (int i = 0; i < NUMBER_MUX_POTS_NPRN; i = i + 1) {
    MUXPOTSNPRN[i]->muxUpdate();
    byte potmessage = MUXPOTSNPRN[i]->getValue();
    if (potmessage != 255)
    {
      //MIDI.sendNrpnValue(byte inMsb, byte inLsb, Channel inChannel);
      MIDI.sendNrpnValue( 0x63, 0x04, MUXPOTSNPRN[i]->Pchannel);
      MIDI.sendNrpnValue( 0x62, MUXPOTSNPRN[i]->Pcontrol, MUXPOTSNPRN[i]->Pchannel);
      MIDI.sendNrpnValue( 0x06, potmessage, MUXPOTSNPRN[i]->Pchannel);

    }
  }
}
